*vlime.txt*  A Common Lisp dev environment for Vim

======================================================================
CONTENTS                                              *vlime-contents*

    1. Introduction ................................ |vlime-intro|
    2. Concepts ................................. |vlime-concepts|
    3. Usage ....................................... |vlime-usage|
        3.1 Starting Up ......................... |vlime-start-up|
        3.2 Completions ...................... |vlime-completions|
        3.3 Automatic Indentation ............ |vlime-auto-indent|
        3.4 REPL .................................... |vlime-repl|
        3.5 Debugger ............................ |vlime-debugger|
        3.6 Inspector .......................... |vlime-inspector|
        3.7 Cross References ........................ |vlime-xref|
        3.8 Compiler Messages ............... |vlime-compiler-msg|
        3.9 Managing Threads ................. |vlime-thread-list|
        3.10 Remote Servers ................ |vlime-remote-server|
    4. Mappings ................................. |vlime-mappings|
    5. Configuration .............................. |vlime-config|
    6. License ................................... |vlime-license|
    7. Bugs ......................................... |vlime-bugs|
    8. Contributing .............................. |vlime-contrib|

======================================================================
1. Introduction                                          *vlime-intro*

Vlime is a Common Lisp dev environment for Vim, similar to SLIME for
Emacs and SLIMV for Vim.

It provides REPL integration, as well as omni-completions, cross
reference utilities, a nice inspector, debugger support, and many
other great facilities to aid you in your glorious Common Lisp hacking
quest.

These Common Lisp implementations are supported:

    Implementation  Version  Notes
    ---------------------------------------------------------------
    ABCL            1.4.0    Supported by the vlime-patched backend
    Allegro CL      10.0     Tested with the Express Edition
    CLISP           2.49+    No multithreading support
    ECL             16.1.3   No debugger support
    CCL             1.11
    SBCL            1.3.13
    LispWorks       6.1      Tested with the Personal Edition

======================================================================
2. Concepts                                           *vlime-concepts*

Connection                                          *vlime-connection*
    A connection between Vim and a Vlime server. Most of Vlime's
    functionalities need an active connection to work. Each Vim
    process can have multiple connections. See |vlime-mappings-conn|
    for available operations regarding connections.

The Current Connection                      *vlime-current-connection*
    A connection (|vlime-connection|) that's bound to the current Vim
    buffer. All Vlime operations in the current buffer will use this
    connection. Vlime will try to choose and remember an open
    connection for a buffer automatically, but it's also possible to
    select one via |vlime-mappings-conn-cs|.

The Current Package                            *vlime-current-package*
    A Common Lisp package that's bound to the current Vim buffer. All
    Vlime operations that concern about the Common Lisp package, such
    as omni-completions, will use this value. Vlime will try to figure
    out the current package automatically, but it's also possible to
    specify a package via |vlime-mappings-misc-p|.

======================================================================
3. Usage                                                 *vlime-usage*

----------------------------------------------------------------------
3.1 Starting Up                                       *vlime-start-up*

If you have sbcl in your $PATH, Vlime can start a server for you:

    1. Set up Quicklisp properly.
    2. Start editing a Common Lisp source file, and use
       |vlime-mappings-invoke-server-rr| to run a server.
    3. Wait for the server. Vlime will automatically connect to it
       when it's ready, and become fully operational.

Note: If it's your first time running the server, Vlime will try to
      install it's dependencies via Quicklisp. This may take some
      time, and Vlime may timeout and show a message:

          VlimeNewServer: failed to wait for Vlime Server 1 ...

      In this case, you can use |vlime-mappings-server-c| to connect
      to this server manually when it's ready.

See |vlime-mappings-invoke-server| for more operations on Vlime
servers, and |vlime-mappings-server| for operations available in the
server output buffer. See |vlime-mappings| for all available Vlime
operations.

When you need to use some other Common Lisp implementation, run an
instance of sbcl in arbitrary locations, or pass special arguments to
the server, use the |g:vlime_cl_impl| option.

You may also start the server manually:

    1. Set up Quicklisp properly.
    2. Run the server:

        sbcl --load <vlime repo>/lisp/start-vlime.lisp

    3. Start editing a Common Lisp source file, and use
       |vlime-mappings-conn-cc| to create a new
       connection.
    4. Vlime shoud now be fully operational.

----------------------------------------------------------------------
3.2 Completions                                    *vlime-completions*

Pressing <Tab> in insert mode will trigger omni-completion. Vlime has
swank-fuzzy enabled by default, so you can, for example, input "vpe"
and then press <Tab> for "vector-push-extend".

Note: Vlime currently doesn't set a limit to the number of completion
      results showed. A large number of results may delay the
      completion menu a bit, temporarily showing the error message
      "Pattern not found".

----------------------------------------------------------------------
3.3 Automatic Indentation                          *vlime-auto-indent*

The auto indent feature will just work as you type. It supports both
space and tab characters. Which to use is determined by the
|expandtab| Vim option.

To adjust mis-indented lines, press <Tab> at the start of those lines
in insert mode, or use |=| command.

----------------------------------------------------------------------
3.4 REPL                                                  *vlime-repl*

The REPL integration is different from other Lisp environments, in
that Vlime's REPL buffer is read-only. One can send expressions to the
REPL from any lisp source buffer using normal mode commands such as
|vlime-mappings-send-ss|, instead of typing the input directly in the
REPL buffer.

Note: It's a design decision to make the REPL buffer read-only, since
      emulating a command line in Vim buffers is often complicated and
      buggy.

                                                  *vlime-input-buffer*
When the REPL needs user input, e.g. (read) or (read-line) is
being evaluated, a dedicated buffer for string input would pop up at
the bottom. Write the input inside this buffer, and hit <CR> in normal
mode, then the REPL would receive your text. The input buffer is a
generic mechanism for the commands that need user input, for example
|vlime-mappings-debugger-i|.

                                              *vlime-interaction-mode*
There's an interaction mode to make sending things to the REPL easier.
It's enabled via |vlime-mappings-misc-i| in Common Lisp source
buffers. In this mode, simply pressing <CR> will send the s-expression
under the cursor.

One can inspect the evaluation results right from the REPL buffer. See
|vlime-mappings-repl| for key mappings.

----------------------------------------------------------------------
3.5 Debugger                                          *vlime-debugger*

The debugger works just like SLDB in SLIME. It pops up a buffer when a
condition is signalled. The buffer shows a list of restarts and a
backtrace. One can press <CR> on a restart to select it.

The debugger can also do single-stepping, examine the local variables,
restart frames, evaluate expressions in frames, etc., provided the
Common Lisp implementation Vlime server is running on supports these.
For more available operations in the debugger buffer, see
|vlime-mappings-debugger|.

Note: Some debugger features are not supported by some Common Lisp
      implementations. These unsupported operations will most likely
      result in an error message.

----------------------------------------------------------------------
3.6 Inspector                                        *vlime-inspector*

The inspector can be used to examine the slot values of instances,
the members of structs, the items of hashtables, etc. It's a very
handy tool in many circumstances.

There're multiple ways to invoke the inspector, but the most
convenient one is using |vlime-mappings-invoke-inspector-II| on an
expression.

The content shown in the inspector buffer usually contains multiple
interactable fields and buttons. Pressing <Tab> will move the cursor
between theses fields/buttons, and <CR> interact with them. If the
interaction needs extra user input, an input buffer would pop up. See
|vlime-input-buffer|.

For more available operations in the inspector buffer, see
|vlime-mappings-inspector|.

----------------------------------------------------------------------
3.7 Cross References                                      *vlime-xref*

The cross references (a.k.a xref) buffer shows where a symbol is
referenced. For example, use |vlime-mappings-invoke-xref-xc| on a
function name to see where the function is called. Pressing <CR> on an
entry inside the xref buffer will take you directly to the reference
location.

For more xref types and key mappings, see
|vlime-mappings-invoke-xref|. For all available key mappings in the
xref buffer, see |vlime-mappings-xref|.

----------------------------------------------------------------------
3.8 Compiler Messages                             *vlime-compiler-msg*

When issuing compilation commands specified in
|vlime-mappings-compile|, any message (warnings and errors etc.)
emitted by the compiler would pop up in a dedicated buffer. Just
select a message by pressing <CR>, and Vlime will take you to the
referenced source location.

For all available key mappings in the compiler message buffer, see
|vlime-mappings-compiler-notes|.

----------------------------------------------------------------------
3.9 Managing Threads                               *vlime-thread-list*

For CL implementations that support threads, there's a simple buffer
that shows all running threads. Use |vlime-mappings-misc-t| to show
it.

While in the thread list, you can perform tasks such as killing a
thread, or activating the debugger in a thread. See
|vlime-mappings-thread-list| for a full list of available operations.

----------------------------------------------------------------------
3.10 Remote Servers                              *vlime-remote-server*

Vlime can connect to a server running on a remote machine. The most
secure way is to use SSH tunnels. Say we want to run a Vlime server on
Mars:

    ssh watney@mars-hab \
        -L 7002:localhost:7002 \
        sbcl --load <vlime repo>/lisp/start-vlime.lisp

This command will also set up local port forwarding, so that we can
connect to the server right here on Earth. Then, in Vim, call
VlimeConnectREPL():

    :call VlimeConnectREPL("127.0.0.1", 7002, "sftp://watney@mars-hab/")

The last argument is an SFTP URL to tell Vlime that all filenames
returned by the server resides in the remote machine, and should be
opened through SFTP.

Note: When connecting to a remote server, relative file paths may
      cause problems. Please make sure the remote Vlime server runs in
      the directory that your paths are relative to. Vlime always
      tries to use absolute paths.

======================================================================
4. Mappings                                           *vlime-mappings*

Most normal mode and visual mode mappings in Vlime starts with
|<LocalLeader>|, which defaults to the backslash "\". If you feel
uncomfortable reaching out for the backslash key, you may change it by
adding this line to your |vimrc| file, to use the comma instead:

    let maplocalleader = ","

                                                *vlime-mappings-remap*
You can also remap a single function using |FileType| |autocmd|s.
Vlime will automatically skip the Vlime functions mapped in your
|vimrc|. For example:

    augroup LocalVlimeKeys
        autocmd!
        autocmd FileType lisp nnoremap <silent> <buffer> <LocalLeader>S
            \ :call VlimeSendCurThingToREPL("thing")<cr>
    augroup end

This will change the mapping for |vlime-mappings-send-ss| from
"<LocalLeader>ss" to "<LocalLeader>S". Vlime uses these filetypes to
distiguish different buffers:

    lisp            Normal Lisp source file.
    vlime_sldb      The debugger buffer.
    vlime_repl      The REPL buffer.
    vlime_inspector The inspector buffer.
    vlime_xref      The cross reference buffer.
    vlime_notes     The compiler notes buffer.
    vlime_threads   The threads buffer.
    vlime_server    The server output buffer.
    vlime_preview   The preview buffer.
    vlime_arglist   The arglist buffer.
    vlime_input     The input buffer.

You can remap any Vlime key mapping in these buffers. See the source
code (autoload/vlime/ui/mapping.vim) for all default mappings.

                                           *vlime-overriding-mappings*
Note: Vlime tries to be nice when mapping the default keys. If a key
      sequence was already mapped, Vlime would NOT overwrite the
      existing mapping. You'll have to resolve the conflict either by
      remapping the Vlime function or by disabling the existing
      mapping. If you don't want this behavior, use
      |g:vlime_force_default_keys| to force Vlime to always override
      existing mappings.

                                            *g:vlime_skipped_mappings*
      When Vlime detects any conflicting default mappings, it will log
      them in the global variable g:vlime_skipped_mappings, which is a
      |dict|, in the following format:

        {
            "<buffer type>": {
                "<mode> <key>": ["<command>", "<reason>"],
                ...
            },
            ...
        }

      The <buffer type> designates which buffer should these mappings
      be applied to. The <mode> is a single character designating the
      Vim mode, as described in |map-listing|. <Key> and <command> are
      things to be mapped. And <reason> describes why this mapping was
      skipped. There are currently two possible reasons:

        "Key already mapped":
            The key combination specified in <key> was already mapped.
            This may imply a key conflict.

        "Command already mapped":
            The command specified in <command> was already mapped to.
            This usually means you have remapped <command> to other
            keys. Reports with this reason can be safely ignored.

      If you are using the default Vlime mappings, and some of them
      don't work properly, you should inspect
      g:vlime_skipped_mappings, and resolve key conflicts, if any.
      Use the method described in |vlime-mappings-remap| to remap keys
      or forcibly override existing mappings.

                                                 *vlime-mappings-list*
All the mappings listed below are defined in normal mode, unless
specified otherwise.

Mappings available in CL source files:         *vlime-mappings-source*

    Connection Management                        *vlime-mappings-conn*
        <LocalLeader>cc                       *vlime-mappings-conn-cc*
            Connect to Vlime server.
        <LocalLeader>cs                       *vlime-mappings-conn-cs*
            Switch Vlime connections. This command shows a list of
            connections, and the current connection will be marked
            with an asterisk "*" at the end.
        <LocalLeader>cd
            Disconnect.
        <LocalLeader>cR
            Rename the current connection.

    Server Management                   *vlime-mappings-invoke-server*
        <LocalLeader>rr              *vlime-mappings-invoke-server-rr*
            Run a new Vlime server and connect to it. To customize the
            server, see |g:vlime_cl_impl|.
        <LocalLeader>rv
            View the console output of a server.
        <LocalLeader>rs              *vlime-mappings-invoke-server-rs*
            Stop a server.
        <LocalLeader>rR
            Rename a server.

    Sending Stuff To The REPL                    *vlime-mappings-send*
        <LocalLeader>ss                       *vlime-mappings-send-ss*
            If there's an s-expression under the cursor, send it to
            the REPL, else send the atom under the cursor, if any.
        <LocalLeader>se
            Send the s-expression under the cursor to the REPL.
        <LocalLeader>st
            Send the top-level s-expression under the cursor to the
            REPL.
        <LocalLeader>sa
            Send the atom under the cursor to the REPL.
        <LocalLeader>s
            (In visual mode) Send the current selection to the REPL.

    Expanding Macros                    *vlime-mappings-expand-macros*
        <LocalLeader>m1
            Expand the macro under the cursor.
        <LocalLeader>ma
            Expand the macro under the cursor and all nested macros.

    Compiling                                 *vlime-mappings-compile*
        <LocalLeader>oe
            Compile the form under the cursor.
        <LocalLeader>ot
            Compile the top-level form under the cursor.
        <LocalLeader>of
            Compile the current file.
        <LocalLeader>o
            (In visual mode) Compile the current selection.

    Cross References (xref)               *vlime-mappings-invoke-xref*
        <LocalLeader>xc                *vlime-mappings-invoke-xref-xc*
            Show callers of the function under the cursor.
        <LocalLeader>xC
            Show callees of the function under the cursor.
        <LocalLeader>xr
            Show references of the variable under the cursor.
        <LocalLeader>xb
            Show bindings of the variable under the cursor.
        <LocalLeader>xs
            Show who sets the value of the variable under the cursor.
        <LocalLeader>xe
            Show who expands the macro under the cursor.
        <LocalLeader>xm
            Show specialized methods for the class under the cursor.
        <LocalLeader>xd
            Show the definition for the name under the cursor.

    Describing Things                        *vlime-mappings-describe*
        <LocalLeader>do
            Describe the "operator" of the s-expression under the
            cursor.
        <LocalLeader>da
            Describe the atom under the cursor.
        <LocalLeader>ds
            Apropos search. An input buffer would pop up, prompting
            for the search pattern. See |vlime-input-buffer|.
        <LocalLeader>ddo
            Show the documentation for the "operator" of the
            s-expression under the cursor.
        <LocalLeader>dda
            Show the documentation for the atom under the cursor.
        <LocalLeader>dr
            Show the arglist for the s-expression under the cursor.

    Undefining Things
        <LocalLeader>uf
            Undefine the function under the cursor.
        <LocalLeader>us
            Unintern the symbol under the cursor.

    Inspection                       *vlime-mappings-invoke-inspector*
        <LocalLeader>II           *vlime-mappings-invoke-inspector-II*
            If there's an s-expression under the cursor, evaluate it,
            else evaluate the atom under the cursor, if any. The
            evaluation result is then shown in the inspector.
        <LocalLeader>Ii
            Same as <LocalLeader>II
        <LocalLeader>IE
            Evaluate and inspect the s-expression under the cursor.
        <LocalLeader>Ie
            Same as <LocalLeader>IE
        <LocalLeader>IT
            Evaluate and inspect the top-level s-expression under the
            cursor.
        <LocalLeader>It
            Same as <LocalLeader>It
        <LocalLeader>IA
            Evaluate and inspect the atom under the cursor.
        <LocalLeader>Ia
            Same as <LocalLeader>IA
        <LocalLeader>I
            (In visual mode) Evaluate and inspect the current
            selection.

    Closing Windows                      *vlime-mappings-close-window*
        <LocalLeader>wp
            Close all visible preview windows.
        <LocalLeader>wr
            Close all visible arglist windows.
        <LocalLeader>wn
            Close all visible compiler notes windows.
        <LocalLeader>wR
            Close all visible REPL windows.
        <LocalLeader>wA
            Close all Vlime windows.
        <LocalLeader>wl
            Show a list of visible Vlime windows, and choose which to
            close.

    Other Stuff                                  *vlime-mappings-misc*
        <LocalLeader>i                         *vlime-mappings-misc-i*
            Interaction Mode. See |vlime-interaction-mode|.
        <LocalLeader>l
            Load the current file.
        <LocalLeader>a
            Disassemble the form under the cursor.
        <LocalLeader>p                         *vlime-mappings-misc-p*
            Specify the package for the current buffer.
        <LocalLeader>b
            Set a breakpoint at entry to a function. An input buffer
            would pop up, prompting for the function name. See
            |vlime-input-buffer|.
        <LocalLeader>t                         *vlime-mappings-misc-t*
            Show a list of the running threads. See
            |vlime-thread-list|.

Mappings available in the REPL buffer:           *vlime-mappings-repl*

    CTRL-c
        Interrupt the REPL thread.
    <LocalLeader>I
        Inspect the evaluation result under the cursor.
    <LocalLeader>y
        Yank the evaluation result under the cursor into the default
        register |quotequote|. Note that this yanked value is an
        expression to be evaluated in the same REPL session. It is
        meaningless in other contexts.
    <LocalLeader>C
        Clear the REPL buffer.

Mappings available in the debugger:          *vlime-mappings-debugger*

    <CR>
        Choose a restart.
    d
        Show the details (local variables and source location etc.)
        of the frame under the cursor.
    S
        Jump to the source code for the frame under the cursor. If the
        source file is already opened in a window, simply move the
        cursor to that window. Otherwise, this command opens the
        source file in the current window by default. A count can be
        prepended to specify which window to use. For example, "2S"
        would open the source file in the second visible window.
    T
        Like "S", but open the source file in a new tab, if it's not
        yet opened in any window. To always create a new tab, prepend
        an arbitrary count, such as "1T".
    r
        Restart the frame under the cursor.
    s
        Start stepping in the frame under the cursor.
    x
        Step over the current function call.
    o
        Step out of the current function.
    c
        Invoke the restart labeled CONTINUE.
    a
        Invoke the restart labeled ABORT.
    C
        Inspect the current condition object.
    i                                      *vlime-mappings-debugger-i*
        Evaluate and inspect an expression in the frame under the
        cursor. An input buffer would pop up, prompting for the
        expression. See |vlime-input-buffer|.
    e
        Evaluate an expression in the frame under the cursor. An input
        buffer would pop up, prompting for the expression. See
        |vlime-input-buffer|.
    D
        Disassemble the frame under the cursor.
    R
        Return a manually specified result from the frame under the
        cursor. An input buffer would pop up, prompting for the
        expression that would generate the result. See
        |vlime-input-buffer|.

Mappings available in the inspector:        *vlime-mappings-inspector*

    <CR>
        Activate the interactable field/button under the cursor.
    <Space>
        Same as <CR>
    <Tab>
        Select the next interactable field/button.
    CTRL-n
        Same as <Tab>
    CTRL-p
        Select the previous interactable field/button.
    p
        Return to the previous inspected object.
    R
        Refresh the inspector.

Mappings available in the xref window and the compiler notes window
                                                 *vlime-mappings-xref*
                                       *vlime-mappings-compiler-notes*

    <CR>
        Jump to the selected source location. If the source file is
        already opened, simply move the cursor to the window
        containing that file. Otherwise, open the source file in the
        window where the xref command was initiated. A count can be
        prepended to specify which window to use. For example, "2<CR>"
        would show the source file in the second visible window.
    t
        Like <CR>, but open the source file in a new tab, if it's not
        yet opened in any window. To always create a new tab, prepend
        an arbitrary count, such as "1t".
    s
        Open the selected source location in a horizontal split
        window. A count can be prepended to specify which window to
        split.
    S
        Like "s", but open a vertical split window.

Mappings available in the thread list:    *vlime-mappings-thread-list*

    CTRL-c
        Interrupt the thread under the cursor. The debugger will be
        activated.
    K
        Kill the thread under the cursor.
    D
        Invoke the debugger in the thread under the cursor.
    r
        Refresh the thread list.

Mappings available in the server output buffer:
                                               *vlime-mappings-server*
    <LocalLeader>c                           *vlime-mappings-server-c*
        Connect to this server.
    <LocalLeader>s
        Stop this server.

======================================================================
5. Configuration                                        *vlime-config*

These variables can be set in |vimrc|, to affect the behavior of
Vlime:

g:vlime_force_default_keys                *g:vlime_force_default_keys*
    A boolean flag to tell Vlime to always use the default key
    mappings. See |vlime-overriding-mappings|. Default: v:false

g:vlime_cl_impl                                      *g:vlime_cl_impl*
    A |string| to designate the CL implementation to use when starting
    a server via |vlime-mappings-invoke-server-rr|. This option has no
    effect when connecting to an existing server via
    |vlime-mappings-conn-cc|. Default: "sbcl"

    You can define a function named
    "VlimeBuildServerCommandFor_<impl>" to build a command line for
    your implementation. For example, add these to your |vimrc|:

        let g:vlime_cl_impl = "my_sbcl"
        function! VlimeBuildServerCommandFor_my_sbcl(vlime_loader, vlime_eval)
            return join(["/path/to/my/custom/sbcl",
                        \ "--load", "/path/to/my/custom/quicklisp/setup.lisp",
                        \ "--load", a:vlime_loader,
                        \ "--eval", a:vlime_eval], " ")
        endfunction

    Then restart Vim and call VlimeBuildServerCommand() to see whether
    the new command is OK:

        :echo VlimeBuildServerCommand()

    The command returned by VlimeBuildServerCommand() will be executed
    to start a Vlime server when the |vlime-mappings-invoke-server-rr|
    command is invoked.

    Vlime has these builder functions predefined:

        " For SBCL, the default
        VlimeBuildServerCommandFor_sbcl()
        " For Clozure CL, set g:vlime_cl_impl to "ccl"
        VlimeBuildServerCommandFor_ccl()

    If you use other implementations, such as clisp and abcl, or need
    to pass special arguments to the server, you'll need to define the
    builder functions.

Note: If you use symlinks on Windows systems to point to Vlime, it may
      fail to locate the server entry point automatically. In this
      case you'll have to define a command builder function and
      overwrite "vlime_loader" with the absolute path of
      "load-vlime.lisp":

          function! VlimeBuildServerCommandFor_xxx(vlime_loader, vlime_eval)
              return join(["sbcl",
                          \ "--load", "c:\\path\\to\\vlime\\lisp\\load-vlime.lisp",
                          \ "--eval", a:vlime_eval], " ")
          endfunction

g:vlime_cl_wait_time                            *g:vlime_cl_wait_time*
    An integer specifying the time Vlime should wait when starting a
    server via |vlime-mappings-invoke-server-rr|, or stopping a server
    via |vlime-mappings-invoke-server-rs|, in seconds. Default: 10

g:vlime_address                                      *g:vlime_address*
    A |list| specifying the address of a Vlime server. This address
    will be used in the |vlime-mappings-conn-cc| command. Default:
    ["127.0.0.1", 7002]

g:vlime_compiler_policy                      *g:vlime_compiler_policy*
    A |dict| to hold the compiler policy. Setting this variable would
    affect the subsequent compiling operations. For example, a value
    of {"DEBUG": 3, "SPEED": 0} means no optimization in runtime
    speed, and maximum debug info. Note that the keys are
    case-sensitive. Please use only uppercase. Default: {}

g:vlime_window_settings                      *g:vlime_window_settings*
    A |dict| to specify window positions and sizes. Vlime will consult
    this variable when creating a new window. The keys should be
    Vlime window types, and the values should be |dict|s containing
    "pos", "size", and "vertical" parameters. For example:

        let g:vlime_window_settings = {
                \ "sldb": {
                    \ "pos": "botright",
                    \ "size": 60,
                    \ "vertical": v:true
                \ }
            \ }

    These settings will cause the debugger window to be created
    on the right, vertically.

    You can also replace the window parameters dict with a |Funcref|
    or a |lambda| expression to generate the parameters dynamically:

        let g:vlime_window_settings = {
                \ "sldb": { -> {"pos": "belowright", "size": winheight(".") / 3}}
            \ }

    With this setting, the debugger window will be one third of the
    current window size.

    Available window types:

        "sldb"      The debugger window.
        "repl"      The REPL window.
        "inspector" The inspector window.
        "xref"      The cross reference window.
        "notes"     The compiler notes window.
        "threads"   The threads window.
        "preview"   The preview window.
        "arglist"   The arglist window.
        "input"     The input buffer window.
        "server"    The server output window.

    Legal values for the parameters:

        "pos":
            "aboveleft", "belowright", "topleft", "botright".
            (See |aboveleft| and the alike to get explanations of
            these positions)
        "size":
            Any positive integer, or v:null to tell Vlime not to
            resize the window.
        "vertical":
            v:true or v:false.

    Vlime will try to use default values when any of these parameters
    are missing. See the value of g:vlime_default_window_settings for
    the default values.

g:vlime_neovim_connector                    *g:vlime_neovim_connector*
    For Neovim only. A |string| to designate the connector program to
    use. Default: "ncat"

    There were no support for non-messagepack socket connections when
    Vlime was ported to Neovim, so Vlime needs a separate program to
    help it connect to the server. This program should be a netcat
    clone, i.e. it should be able to relay socket data to
    stdin/stdout. Ncat (https://nmap.org/ncat/) is the recommended
    default. If you have it in your $PATH, things should just work out
    of box.

    To use another program instead, define a function named
    "VlimeBuildConnectorCommandFor_<prgm>" that returns the command
    line, and set g:vlime_neovim_connector accordingly. For example,
    to use nc6:

        let g:vlime_neovim_connector = "nc6"
        function! VlimeBuildConnectorCommandFor_nc6(host, port)
            return ['nc6', a:host, string(a:port)]
        endfunction

    You can restart Neovim and call VlimeBuildConnectorCommand() to
    see whether the new command is OK:

        :echo VlimeBuildConnectorCommand('127.0.0.1', 7002)

Note: Vlime may move on to Neovim's new raw socket API when it's
      ready. The variable g:vlime_neovim_connector and
      VlimeBuildConnectorCommand() may eventually be deprecated.

g:vlime_contribs                                    *g:vlime_contribs*
    A |list| of Swank contribs to load when initializing a Vlime
    connection. Note that the names are case-sensitive. Please use
    only uppercase. Default: ["SWANK-ASDF", "SWANK-PACKAGE-FU",
    "SWANK-PRESENTATIONS", "SWANK-FANCY-INSPECTOR", "SWANK-C-P-C",
    "SWANK-ARGLISTS", "SWANK-REPL", "SWANK-FUZZY"]

g:vlime_user_contrib_initializers  *g:vlime_user_contrib_initializers*
    A |dict| of user contrib initializers. If your Swank contrib module
    needs special initialization, add an initializer function here.
    See autoload/vlime/contrib.vim for examples. Default: {}

g:vlime_buf_name_sep                            *g:vlime_buf_name_sep*
    A |string| used as the separator between segments of Vlime special
    buffer names. The default works fine on Linux and Windows, but if
    your OS or Vim complained about illegal characters in filenames,
    try changing this variable. Default: " | "

======================================================================
6. License                                             *vlime-license*

This plugin is licensed under the terms of the MIT license. See
LICENSE.txt for details.

======================================================================
7. Bugs                                                   *vlime-bugs*

* In Vim prior to version 8.0.0312, there was a bug in the channel
  implementation that caused large messages to be dropped incorrectly.
  Channel messages from Vlime server can be quite large, so using
  8.0.0312 or a more recent version is strongly recommended.

* Vlime is asynchronous. When the server takes too much time to
  process a request, you can still invoke other commands or input
  text, but the delayed result may cause some interference when it
  arrives.

* The Vim interface may sometimes freeze until a command is issued
  (e.g. move the cursor).

Please file an issue on https://github.com/l04m33/vlime/issues if you
find any other problem.

======================================================================
8. Contributing                                        *vlime-contrib*

The source repo for Vlime is hosted on GitHub:

    https://github.com/l04m33/vlime

Please send pull requests, and feel free to contact me at
l04m33(at)gmail.com if you have any suggestions for improving Vlime.
